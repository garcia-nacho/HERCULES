write.fasta(dummy.f[index], paste(temp,"/short.fasta",sep = ""), names = names(dummy.f)[index])
system(paste("/home/nacho/anaconda3/bin/makeblastdb -in ",
temp,"/short.fasta"," -out ", temp,"/tempdb" ," -dbtype nucl", sep = ""))
system(paste("/home/nacho/anaconda3/bin/blastn -query ", temp,"/short.fasta",
" -outfmt \'6 qseqid sseqid qstart qend sstart send slen qlen length mismatch evalue\' -db ",
temp,"/tempdb",
" -out ",
temp,"/test_results.tsv",
" -num_threads 10 -perc_identity 100",
sep = ""))
if(exists("df2"))rm(df2)
if(file.size(paste(temp,"/test_results.tsv",sep = ""))>0){
df2<-fread(paste(temp,"/test_results.tsv",sep = ""),sep = "\t", header = FALSE)
}
if(exists("df2")){
colnames(df2)<- c("qseqid", "sseqid", "qstart", "qend", "sstart", "send" , "slen" , "qlen" ,"length", "mismatch" ,"evalue")
cores<-8
cluster.cores<-makeCluster(cores)
registerDoSNOW(cluster.cores)
sq.id<-unique(df2$qseqid)
out.par<-foreach(j=1:length(sq.id), .verbose=FALSE, .packages = c("data.table","seqinr")) %dopar%{
dum<-as.data.frame(df2[which(df2$qseqid==sq.id[j]),])
#dum<-dum[which(dum$mismatch/dum$length < 0.01 ),]
dum<-dum[which(dum$qseqid==dum$sseqid),]
fw.rep.len<-length(which(dum$qstart<3 & dum$sstart > unique(dum$qlen)-3  ))
rv.rep.len<-length(which(dum$qstart<3 & dum$send > unique(dum$qlen)-3  ))
if(rv.rep.len > 1 | fw.rep.len > 0 ){
return(dum$qseqid[1])
}else{
return(NA)
}
}
stopCluster(cluster.cores)
out<-unlist(out.par)
out<-out[-which(is.na(out))]
}else{
out<-NULL
}
df$plasmids[i]<-length(out)
if(length(out)>0) outfasta<-c(outfasta, dummy.f[which(names(dummy.f) %in% out)])
}
}
system(paste("rm -rf ", temp,"", sep = "" ))
if(f==1){
df$short.count[i]<-shorts
}else{
df$short.count[i]<-paste(df$short.count[i], "|",shorts)
}
}
if(i/500 == round(i/500) & length(outfasta)>0 ){
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/part",part,".fasta",sep = ""), names = names(outfasta))
part<-part+1
outfasta<-list()
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/metadata.csv", row.names = FALSE)
}
}
part<-part+1
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/part",part,".fasta",sep = ""), names = names(outfasta))
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/metadata.csv", row.names = FALSE)
library(seqinr)
library("doParallel")
library("parallel")
library("foreach")
library(doSNOW)
library(data.table)
# ENA_extractor -----------------------------------------------------------
df<-read.csv("/media/nacho/Data/OnGoingProjects/PlasmidFinder/corynebacterium.tsv",sep = "\t")
df<-df[-which(duplicated(df$Assembly.Name)),]
df$short.count<-NA
df$plasmids<-NA
part<-1
outfasta<-list()
temp<-gsub(".*/","/media/nacho/Data/OnGoingProjects/PlasmidFinder/",tempdir(check = TRUE))
dir.create(temp)
for (i in 1:nrow(df)) {
system(paste("curl 'https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/",df$Assembly.Accession[i],"/download?include_annotation_type=GENOME_FASTA' --output ",temp,"/testncbi.zip",
sep = ""))
if(file.size(paste(temp,"/testncbi.zip",sep = "")) < 20000000){
system(paste("unzip ", temp,"/testncbi.zip -d ", temp,"/out",sep = ""))
fastas<-list.files(paste(temp,"/out",sep = ""), pattern = ".fna", recursive = TRUE, full.names = TRUE)
}else{
fastas<-NULL
}
print(paste(i, "of", nrow(df)))
if(length(fastas)>0){
for (f in 1:length(fastas)) {
dummy.f<-read.fasta(fastas[f])
fragments<-length(dummy.f)
lens<-unlist(lapply(dummy.f, length))
shorts<-length(which(lens>900 & lens < 10000))
index<-which(lens>900 & lens < 10000)
name<-paste(df$Assembly.Accession[i], "_F",f, sep ="" )
if(shorts>0){
names(dummy.f)<-paste( "NCBI_",name,"_NAME_",names(dummy.f),sep = "")
write.fasta(dummy.f[index], paste(temp,"/short.fasta",sep = ""), names = names(dummy.f)[index])
system(paste("/home/nacho/anaconda3/bin/makeblastdb -in ",
temp,"/short.fasta"," -out ", temp,"/tempdb" ," -dbtype nucl", sep = ""))
system(paste("/home/nacho/anaconda3/bin/blastn -query ", temp,"/short.fasta",
" -outfmt \'6 qseqid sseqid qstart qend sstart send slen qlen length mismatch evalue\' -db ",
temp,"/tempdb",
" -out ",
temp,"/test_results.tsv",
" -num_threads 10 -perc_identity 100",
sep = ""))
if(exists("df2"))rm(df2)
if(file.size(paste(temp,"/test_results.tsv",sep = ""))>0){
df2<-fread(paste(temp,"/test_results.tsv",sep = ""),sep = "\t", header = FALSE)
}
if(exists("df2")){
colnames(df2)<- c("qseqid", "sseqid", "qstart", "qend", "sstart", "send" , "slen" , "qlen" ,"length", "mismatch" ,"evalue")
cores<-8
cluster.cores<-makeCluster(cores)
registerDoSNOW(cluster.cores)
sq.id<-unique(df2$qseqid)
out.par<-foreach(j=1:length(sq.id), .verbose=FALSE, .packages = c("data.table","seqinr")) %dopar%{
dum<-as.data.frame(df2[which(df2$qseqid==sq.id[j]),])
#dum<-dum[which(dum$mismatch/dum$length < 0.01 ),]
dum<-dum[which(dum$qseqid==dum$sseqid),]
fw.rep.len<-length(which(dum$qstart<3 & dum$sstart > unique(dum$qlen)-3  ))
rv.rep.len<-length(which(dum$qstart<3 & dum$send > unique(dum$qlen)-3  ))
if(rv.rep.len > 1 | fw.rep.len > 0 ){
return(dum$qseqid[1])
}else{
return(NA)
}
}
stopCluster(cluster.cores)
out<-unlist(out.par)
out<-out[-which(is.na(out))]
}else{
out<-NULL
}
df$plasmids[i]<-length(out)
if(length(out)>0) outfasta<-c(outfasta, dummy.f[which(names(dummy.f) %in% out)])
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(f==1){
df$short.count[i]<-shorts
}else{
df$short.count[i]<-paste(df$short.count[i], "|",shorts)
}
}
if(i/500 == round(i/500) & length(outfasta)>0 ){
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/part",part,".fasta",sep = ""), names = names(outfasta))
part<-part+1
outfasta<-list()
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/metadata.csv", row.names = FALSE)
}
}
part<-part+1
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/part",part,".fasta",sep = ""), names = names(outfasta))
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/Corynebacterium/metadata.csv", row.names = FALSE)
df<-read.csv("/media/nacho/Data/OnGoingProjects/PlasmidFinder/staphylococcus.tsv",sep = "\t")
df<-read.csv("/media/nacho/Data/OnGoingProjects/PlasmidFinder/staphylococcus.tsv",sep = "\t")
df<-df[-which(duplicated(df$Assembly.Name)),]
View(df)
table(df$Organism.Name)
df<-read.csv("/media/nacho/Data/OnGoingProjects/PlasmidFinder/pseudomonas.tsv",sep = "\t")
df<-df[-which(duplicated(df$Assembly.Name)),]
library(seqinr)
library("doParallel")
library("parallel")
library("foreach")
library(doSNOW)
library(data.table)
# ENA_extractor -----------------------------------------------------------
df<-read.csv("/media/nacho/Data/OnGoingProjects/PlasmidFinder/pseudomonas.tsv",sep = "\t")
df<-df[-which(duplicated(df$Assembly.Name)),]
df$short.count<-NA
df$plasmids<-NA
part<-1
outfasta<-list()
temp<-gsub(".*/","/media/nacho/Data/OnGoingProjects/PlasmidFinder/",tempdir(check = TRUE))
dir.create(temp)
for (i in 1:nrow(df)) {
system(paste("curl 'https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/",df$Assembly.Accession[i],"/download?include_annotation_type=GENOME_FASTA' --output ",temp,"/testncbi.zip",
sep = ""))
if(file.size(paste(temp,"/testncbi.zip",sep = "")) < 20000000){
system(paste("unzip ", temp,"/testncbi.zip -d ", temp,"/out",sep = ""))
fastas<-list.files(paste(temp,"/out",sep = ""), pattern = ".fna", recursive = TRUE, full.names = TRUE)
}else{
fastas<-NULL
}
print(paste(i, "of", nrow(df)))
if(length(fastas)>0){
for (f in 1:length(fastas)) {
dummy.f<-read.fasta(fastas[f])
fragments<-length(dummy.f)
lens<-unlist(lapply(dummy.f, length))
shorts<-length(which(lens>900 & lens < 10000))
index<-which(lens>900 & lens < 10000)
name<-paste(df$Assembly.Accession[i], "_F",f, sep ="" )
if(shorts>0){
names(dummy.f)<-paste( "NCBI_",name,"_NAME_",names(dummy.f),sep = "")
write.fasta(dummy.f[index], paste(temp,"/short.fasta",sep = ""), names = names(dummy.f)[index])
system(paste("/home/nacho/anaconda3/bin/makeblastdb -in ",
temp,"/short.fasta"," -out ", temp,"/tempdb" ," -dbtype nucl", sep = ""))
system(paste("/home/nacho/anaconda3/bin/blastn -query ", temp,"/short.fasta",
" -outfmt \'6 qseqid sseqid qstart qend sstart send slen qlen length mismatch evalue\' -db ",
temp,"/tempdb",
" -out ",
temp,"/test_results.tsv",
" -num_threads 10 -perc_identity 100",
sep = ""))
if(exists("df2"))rm(df2)
if(file.size(paste(temp,"/test_results.tsv",sep = ""))>0){
df2<-fread(paste(temp,"/test_results.tsv",sep = ""),sep = "\t", header = FALSE)
}
if(exists("df2")){
colnames(df2)<- c("qseqid", "sseqid", "qstart", "qend", "sstart", "send" , "slen" , "qlen" ,"length", "mismatch" ,"evalue")
cores<-8
cluster.cores<-makeCluster(cores)
registerDoSNOW(cluster.cores)
sq.id<-unique(df2$qseqid)
out.par<-foreach(j=1:length(sq.id), .verbose=FALSE, .packages = c("data.table","seqinr")) %dopar%{
dum<-as.data.frame(df2[which(df2$qseqid==sq.id[j]),])
#dum<-dum[which(dum$mismatch/dum$length < 0.01 ),]
dum<-dum[which(dum$qseqid==dum$sseqid),]
fw.rep.len<-length(which(dum$qstart<3 & dum$sstart > unique(dum$qlen)-3  ))
rv.rep.len<-length(which(dum$qstart<3 & dum$send > unique(dum$qlen)-3  ))
if(rv.rep.len > 1 | fw.rep.len > 0 ){
return(dum$qseqid[1])
}else{
return(NA)
}
}
stopCluster(cluster.cores)
out<-unlist(out.par)
out<-out[-which(is.na(out))]
}else{
out<-NULL
}
df$plasmids[i]<-length(out)
if(length(out)>0) outfasta<-c(outfasta, dummy.f[which(names(dummy.f) %in% out)])
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(f==1){
df$short.count[i]<-shorts
}else{
df$short.count[i]<-paste(df$short.count[i], "|",shorts)
}
}
if(i/500 == round(i/500) & length(outfasta)>0 ){
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
part<-part+1
outfasta<-list()
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
}
}
part<-part+1
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
library(seqinr)
library("doParallel")
library("parallel")
library("foreach")
library(doSNOW)
library(data.table)
# ENA_extractor -----------------------------------------------------------
df<-read.csv("/media/nacho/Data/OnGoingProjects/PlasmidFinder/pseudomonas.tsv",sep = "\t")
df<-df[-which(duplicated(df$Assembly.Name)),]
df$short.count<-NA
df$plasmids<-NA
part<-1
outfasta<-list()
temp<-gsub(".*/","/media/nacho/Data/OnGoingProjects/PlasmidFinder/",tempdir(check = TRUE))
dir.create(temp)
for (i in 1:nrow(df)) {
system(paste("curl 'https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/",df$Assembly.Accession[i],"/download?include_annotation_type=GENOME_FASTA' --output ",temp,"/testncbi.zip",
sep = ""))
if(file.size(paste(temp,"/testncbi.zip",sep = "")) < 20000000){
system(paste("unzip ", temp,"/testncbi.zip -d ", temp,"/out",sep = ""))
fastas<-list.files(paste(temp,"/out",sep = ""), pattern = ".fna", recursive = TRUE, full.names = TRUE)
}else{
fastas<-NULL
}
print(paste(i, "of", nrow(df)))
if(length(fastas)>0){
for (f in 1:length(fastas)) {
dummy.f<-read.fasta(fastas[f])
fragments<-length(dummy.f)
lens<-unlist(lapply(dummy.f, length))
shorts<-length(which(lens>900 & lens < 10000))
index<-which(lens>900 & lens < 10000)
name<-paste(df$Assembly.Accession[i], "_F",f, sep ="" )
if(shorts>0){
names(dummy.f)<-paste( "NCBI_",name,"_NAME_",names(dummy.f),sep = "")
write.fasta(dummy.f[index], paste(temp,"/short.fasta",sep = ""), names = names(dummy.f)[index])
system(paste("/home/nacho/anaconda3/bin/makeblastdb -in ",
temp,"/short.fasta"," -out ", temp,"/tempdb" ," -dbtype nucl", sep = ""))
system(paste("/home/nacho/anaconda3/bin/blastn -query ", temp,"/short.fasta",
" -outfmt \'6 qseqid sseqid qstart qend sstart send slen qlen length mismatch evalue\' -db ",
temp,"/tempdb",
" -out ",
temp,"/test_results.tsv",
" -num_threads 10 -perc_identity 100",
sep = ""))
if(exists("df2"))rm(df2)
if(file.size(paste(temp,"/test_results.tsv",sep = ""))>0){
df2<-fread(paste(temp,"/test_results.tsv",sep = ""),sep = "\t", header = FALSE)
}
if(exists("df2")){
colnames(df2)<- c("qseqid", "sseqid", "qstart", "qend", "sstart", "send" , "slen" , "qlen" ,"length", "mismatch" ,"evalue")
cores<-8
cluster.cores<-makeCluster(cores)
registerDoSNOW(cluster.cores)
sq.id<-unique(df2$qseqid)
out.par<-foreach(j=1:length(sq.id), .verbose=FALSE, .packages = c("data.table","seqinr")) %dopar%{
dum<-as.data.frame(df2[which(df2$qseqid==sq.id[j]),])
#dum<-dum[which(dum$mismatch/dum$length < 0.01 ),]
dum<-dum[which(dum$qseqid==dum$sseqid),]
fw.rep.len<-length(which(dum$qstart<3 & dum$sstart > unique(dum$qlen)-3  ))
rv.rep.len<-length(which(dum$qstart<3 & dum$send > unique(dum$qlen)-3  ))
if(rv.rep.len > 1 | fw.rep.len > 0 ){
return(dum$qseqid[1])
}else{
return(NA)
}
}
stopCluster(cluster.cores)
out<-unlist(out.par)
out<-out[-which(is.na(out))]
}else{
out<-NULL
}
df$plasmids[i]<-length(out)
if(length(out)>0) outfasta<-c(outfasta, dummy.f[which(names(dummy.f) %in% out)])
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(f==1){
df$short.count[i]<-shorts
}else{
df$short.count[i]<-paste(df$short.count[i], "|",shorts)
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(i/500 == round(i/500) & length(outfasta)>0 ){
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
part<-part+1
outfasta<-list()
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
}
}
part<-part+1
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
i
for (i in 5157:nrow(df)) {
system(paste("curl 'https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/",df$Assembly.Accession[i],"/download?include_annotation_type=GENOME_FASTA' --output ",temp,"/testncbi.zip",
sep = ""))
if(file.size(paste(temp,"/testncbi.zip",sep = "")) < 20000000){
system(paste("unzip ", temp,"/testncbi.zip -d ", temp,"/out",sep = ""))
fastas<-list.files(paste(temp,"/out",sep = ""), pattern = ".fna", recursive = TRUE, full.names = TRUE)
}else{
fastas<-NULL
}
print(paste(i, "of", nrow(df)))
if(length(fastas)>0){
for (f in 1:length(fastas)) {
dummy.f<-read.fasta(fastas[f])
fragments<-length(dummy.f)
lens<-unlist(lapply(dummy.f, length))
shorts<-length(which(lens>900 & lens < 10000))
index<-which(lens>900 & lens < 10000)
name<-paste(df$Assembly.Accession[i], "_F",f, sep ="" )
if(shorts>0){
names(dummy.f)<-paste( "NCBI_",name,"_NAME_",names(dummy.f),sep = "")
write.fasta(dummy.f[index], paste(temp,"/short.fasta",sep = ""), names = names(dummy.f)[index])
system(paste("/home/nacho/anaconda3/bin/makeblastdb -in ",
temp,"/short.fasta"," -out ", temp,"/tempdb" ," -dbtype nucl", sep = ""))
system(paste("/home/nacho/anaconda3/bin/blastn -query ", temp,"/short.fasta",
" -outfmt \'6 qseqid sseqid qstart qend sstart send slen qlen length mismatch evalue\' -db ",
temp,"/tempdb",
" -out ",
temp,"/test_results.tsv",
" -num_threads 10 -perc_identity 100",
sep = ""))
if(exists("df2"))rm(df2)
if(file.size(paste(temp,"/test_results.tsv",sep = ""))>0){
df2<-fread(paste(temp,"/test_results.tsv",sep = ""),sep = "\t", header = FALSE)
}
if(exists("df2")){
colnames(df2)<- c("qseqid", "sseqid", "qstart", "qend", "sstart", "send" , "slen" , "qlen" ,"length", "mismatch" ,"evalue")
cores<-8
cluster.cores<-makeCluster(cores)
registerDoSNOW(cluster.cores)
sq.id<-unique(df2$qseqid)
out.par<-foreach(j=1:length(sq.id), .verbose=FALSE, .packages = c("data.table","seqinr")) %dopar%{
dum<-as.data.frame(df2[which(df2$qseqid==sq.id[j]),])
#dum<-dum[which(dum$mismatch/dum$length < 0.01 ),]
dum<-dum[which(dum$qseqid==dum$sseqid),]
fw.rep.len<-length(which(dum$qstart<3 & dum$sstart > unique(dum$qlen)-3  ))
rv.rep.len<-length(which(dum$qstart<3 & dum$send > unique(dum$qlen)-3  ))
if(rv.rep.len > 1 | fw.rep.len > 0 ){
return(dum$qseqid[1])
}else{
return(NA)
}
}
stopCluster(cluster.cores)
out<-unlist(out.par)
out<-out[-which(is.na(out))]
}else{
out<-NULL
}
df$plasmids[i]<-length(out)
if(length(out)>0) outfasta<-c(outfasta, dummy.f[which(names(dummy.f) %in% out)])
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(f==1){
df$short.count[i]<-shorts
}else{
df$short.count[i]<-paste(df$short.count[i], "|",shorts)
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(i/500 == round(i/500) & length(outfasta)>0 ){
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
part<-part+1
outfasta<-list()
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
}
}
part<-part+1
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
gc()
i
for (i in 17932:nrow(df)) {
system(paste("curl 'https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/",df$Assembly.Accession[i],"/download?include_annotation_type=GENOME_FASTA' --output ",temp,"/testncbi.zip",
sep = ""))
if(file.size(paste(temp,"/testncbi.zip",sep = "")) < 20000000){
system(paste("unzip ", temp,"/testncbi.zip -d ", temp,"/out",sep = ""))
fastas<-list.files(paste(temp,"/out",sep = ""), pattern = ".fna", recursive = TRUE, full.names = TRUE)
}else{
fastas<-NULL
}
print(paste(i, "of", nrow(df)))
if(length(fastas)>0){
for (f in 1:length(fastas)) {
dummy.f<-read.fasta(fastas[f])
fragments<-length(dummy.f)
lens<-unlist(lapply(dummy.f, length))
shorts<-length(which(lens>900 & lens < 10000))
index<-which(lens>900 & lens < 10000)
name<-paste(df$Assembly.Accession[i], "_F",f, sep ="" )
if(shorts>0){
names(dummy.f)<-paste( "NCBI_",name,"_NAME_",names(dummy.f),sep = "")
write.fasta(dummy.f[index], paste(temp,"/short.fasta",sep = ""), names = names(dummy.f)[index])
system(paste("/home/nacho/anaconda3/bin/makeblastdb -in ",
temp,"/short.fasta"," -out ", temp,"/tempdb" ," -dbtype nucl", sep = ""))
system(paste("/home/nacho/anaconda3/bin/blastn -query ", temp,"/short.fasta",
" -outfmt \'6 qseqid sseqid qstart qend sstart send slen qlen length mismatch evalue\' -db ",
temp,"/tempdb",
" -out ",
temp,"/test_results.tsv",
" -num_threads 10 -perc_identity 100",
sep = ""))
if(exists("df2"))rm(df2)
if(file.size(paste(temp,"/test_results.tsv",sep = ""))>0){
df2<-fread(paste(temp,"/test_results.tsv",sep = ""),sep = "\t", header = FALSE)
}
if(exists("df2")){
colnames(df2)<- c("qseqid", "sseqid", "qstart", "qend", "sstart", "send" , "slen" , "qlen" ,"length", "mismatch" ,"evalue")
cores<-4
cluster.cores<-makeCluster(cores)
registerDoSNOW(cluster.cores)
sq.id<-unique(df2$qseqid)
out.par<-foreach(j=1:length(sq.id), .verbose=FALSE, .packages = c("data.table","seqinr")) %dopar%{
dum<-as.data.frame(df2[which(df2$qseqid==sq.id[j]),])
#dum<-dum[which(dum$mismatch/dum$length < 0.01 ),]
dum<-dum[which(dum$qseqid==dum$sseqid),]
fw.rep.len<-length(which(dum$qstart<3 & dum$sstart > unique(dum$qlen)-3  ))
rv.rep.len<-length(which(dum$qstart<3 & dum$send > unique(dum$qlen)-3  ))
if(rv.rep.len > 1 | fw.rep.len > 0 ){
return(dum$qseqid[1])
}else{
return(NA)
}
}
stopCluster(cluster.cores)
out<-unlist(out.par)
out<-out[-which(is.na(out))]
}else{
out<-NULL
}
df$plasmids[i]<-length(out)
if(length(out)>0) outfasta<-c(outfasta, dummy.f[which(names(dummy.f) %in% out)])
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(f==1){
df$short.count[i]<-shorts
}else{
df$short.count[i]<-paste(df$short.count[i], "|",shorts)
}
}
system(paste("rm -rf ", temp,"/*", sep = "" ))
if(i/500 == round(i/500) & length(outfasta)>0 ){
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
part<-part+1
outfasta<-list()
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
}
}
part<-part+1
write.fasta(outfasta, paste("/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/part",part,".fasta",sep = ""), names = names(outfasta))
write.csv(df, "/media/nacho/Data/OnGoingProjects/PlasmidFinder/enaplasmids/pseudomonas/metadata.csv", row.names = FALSE)
